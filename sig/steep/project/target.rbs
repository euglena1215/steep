module Steep
  class Project
    class Target
      attr_reader name: Symbol

      attr_reader target_options: Options?

      attr_reader source_pattern: Pattern

      attr_reader inline_source_pattern: Pattern

      attr_reader signature_pattern: Pattern

      attr_reader code_diagnostics_config: untyped

      # Whether this target is returns optional type if `implicitly-returns-nil` annotation is given
      #
      attr_reader implicitly_returns_nil: bool

      attr_reader project: Project

      attr_reader unreferenced: bool

      attr_reader groups: Array[Group]

      def initialize: (
        name: Symbol,
        options: Options?,
        source_pattern: Pattern,
        inline_source_pattern: Pattern,
        signature_pattern: Pattern,
        code_diagnostics_config: untyped,
        project: Project,
        unreferenced: bool,
        implicitly_returns_nil: bool
      ) -> void

      # The options that applies to this target
      #
      # Might be the options given to the target or the project.
      #
      def options: () -> Options

      # Returns `true` if the given `path` (relative to the project root) is a source file that belongs to this target or its sub-group
      #
      # Returns `false` if the path is an inline source file.
      #
      def possible_source_file?: (Pathname path) -> (Group | Target | nil)

      # Returns `true` if the given `path` (relative to the project root) is a signature file that belongs to this target or its sub-group
      #
      def possible_signature_file?: (Pathname path) -> (Group | Target | nil)

      # Returns `true` if the given `path` (relative to the project root) is an inline source file that belongs to this target or its sub-group
      #
      # Returns `true` even if the `possible_source_file?` returns `true` for the same path.
      # 
      def possible_inline_source_file?: (Pathname path) -> (Group | Target | nil)

      def new_env_loader: () -> RBS::EnvironmentLoader

      def self.construct_env_loader: (options: Options, project: Project) -> RBS::EnvironmentLoader
    end
  end
end
