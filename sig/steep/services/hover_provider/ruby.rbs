module Steep
  module Services
    module HoverProvider
      type Ruby::content = TypeContent | VariableContent | MethodCallContent | DefinitionContent | ConstantContent | TypeAssertionContent
                         | ClassTypeContent | InterfaceTypeContent | TypeAliasContent

      class Ruby
        attr_reader service: TypeCheckService

        def initialize: (service: TypeCheckService) -> void

        def project: () -> Project

        def method_definition_for: (AST::Types::Factory factory, ::RBS::TypeName type_name, singleton_method: Symbol) -> ::RBS::Definition::Method
                                 | (AST::Types::Factory factory, ::RBS::TypeName type_name, instance_method: Symbol) -> ::RBS::Definition::Method

        def typecheck: (Project::Target target, path: Pathname, content: String, line: Integer, column: Integer) -> [Typing, Subtyping::Check]?

        def method_name_from_method: (TypeInference::Context::MethodContext context, builder: ::RBS::DefinitionBuilder) -> method_name

        def content_for: (target: Project::Target, path: Pathname, line: Integer, column: Integer) -> Ruby::content?

        def type_name_content: (RBS::Environment environment, RBS::TypeName type_name, RBS::Location location) -> (ClassTypeContent | InterfaceTypeContent | TypeAliasContent | nil)
      end
    end
  end
end
